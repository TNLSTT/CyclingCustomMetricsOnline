datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  provider     String?
  createdAt    DateTime   @default(now())
  activities   Activity[]
  profile      Profile?
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String?
  avatarUrl   String?
  bio         String?
  location    String?
  primaryDiscipline String?
  trainingFocus String?
  weeklyGoalHours Int?
  websiteUrl  String?
  instagramHandle String?
  achievements String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id            String           @id @default(cuid())
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])
  source        String
  startTime     DateTime
  durationSec   Int
  sampleRateHz  Float?
  createdAt     DateTime         @default(now())
  samples       ActivitySample[]
  metrics       MetricResult[]
}

model ActivitySample {
  id         BigInt   @id @default(autoincrement())
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  t          Int
  heartRate  Int?
  cadence    Int?
  power      Int?
  speed      Float?
  elevation  Float?
  temperature Float?
  latitude   Float?
  longitude  Float?

  @@index([activityId])
  @@index([activityId, t])
}

model MetricDefinition {
  id            String          @id @default(cuid())
  key           String          @unique
  name          String
  version       Int             @default(1)
  description   String
  units         String?
  computeConfig Json?
  createdAt     DateTime        @default(now())
  results       MetricResult[]
}

model MetricResult {
  id                  String           @id @default(cuid())
  activityId          String
  activity            Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  metricDefinitionId  String
  metricDefinition    MetricDefinition @relation(fields: [metricDefinitionId], references: [id], onDelete: Cascade)
  summary             Json
  series              Json?
  computedAt          DateTime         @default(now())

  @@index([activityId])
  @@index([metricDefinitionId, activityId])
  @@unique([activityId, metricDefinitionId])
}
