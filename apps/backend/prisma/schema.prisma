datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  provider     String?
  utmSource    String?
  createdAt    DateTime   @default(now())
  lastLoginAt  DateTime?  @default(now())
  role         Role       @default(USER)
  activities   Activity[]
  profile      Profile?
  pageViews    PageView[]
  metricEvents MetricEvent[]
  requestStats ApiRequestMetric[]
  exceptionEvents ExceptionEvent[]
  computationJobs MetricComputationJob[]
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String?
  avatarUrl   String?
  bio         String?
  location    String?
  primaryDiscipline String?
  trainingFocus String?
  weeklyGoalHours Int?
  ftpWatts    Int?
  weightKg    Float?
  hrMaxBpm    Int?
  hrRestBpm   Int?
  websiteUrl  String?
  instagramHandle String?
  achievements String?
  events      Json?    @default("[]")
  goals       Json?    @default("[]")
  strengths   String?
  weaknesses  String?
  analytics   Json?    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id            String           @id @default(cuid())
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])
  source        String
  startTime     DateTime
  durationSec   Int
  sampleRateHz  Float?
  createdAt     DateTime         @default(now())
  aiInsight     Json?
  aiInsightGeneratedAt DateTime?
  aiRecommendation Json?
  aiRecommendationGeneratedAt DateTime?
  samples       ActivitySample[]
  metrics       MetricResult[]
  metricEvents  MetricEvent[]
  recomputeJobs MetricComputationJob[]

  @@unique([userId, startTime, durationSec])
}

model ActivitySample {
  id         BigInt   @id @default(autoincrement())
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  t          Int
  heartRate  Int?
  cadence    Int?
  power      Int?
  speed      Float?
  elevation  Float?
  temperature Float?
  latitude   Float?
  longitude  Float?

  @@index([activityId])
  @@index([activityId, t])
}

model MetricDefinition {
  id            String          @id @default(cuid())
  key           String          @unique
  name          String
  version       Int             @default(1)
  description   String
  units         String?
  computeConfig Json?
  createdAt     DateTime        @default(now())
  results       MetricResult[]
}

model MetricResult {
  id                  String           @id @default(cuid())
  activityId          String
  activity            Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  metricDefinitionId  String
  metricDefinition    MetricDefinition @relation(fields: [metricDefinitionId], references: [id], onDelete: Cascade)
  summary             Json
  series              Json?
  computedAt          DateTime         @default(now())

  @@index([activityId])
  @@index([metricDefinitionId, activityId])
  @@unique([activityId, metricDefinitionId])
}

model PageView {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  path      String
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([userId, createdAt])
}

model MetricEvent {
  id         String   @id @default(cuid())
  type       String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)
  durationMs Int?
  success    Boolean?
  meta       Json?
  createdAt  DateTime @default(now())

  @@index([type, createdAt])
  @@index([userId, type, createdAt])
  @@index([activityId, createdAt])
}

model ApiRequestMetric {
  id                  String   @id @default(cuid())
  method              String
  path                String
  statusCode          Int
  durationMs          Int
  queryCount          Int
  avgQueryDurationMs  Float
  timestamp           DateTime @default(now())
  userId              String?
  user                User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([timestamp])
  @@index([path, timestamp])
}

model ExceptionEvent {
  id         String   @id @default(cuid())
  name       String
  message    String
  stack      String?
  statusCode Int
  path       String?
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([name, createdAt])
}

model MetricComputationJob {
  id            String   @id @default(cuid())
  activityId    String
  activity      Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  metricKeys    String[]
  status        String
  enqueuedAt    DateTime @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  durationMs    Int?

  @@index([status, enqueuedAt])
  @@index([activityId, enqueuedAt])
  @@index([userId, enqueuedAt])
}
